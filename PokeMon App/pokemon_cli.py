import sqlite3
import requests

DB_NAME = "pokemon.db"

# Function to initialize the database (run once)
def initialise_database():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS pokemon (
            id INTEGER PRIMARY KEY, 
            name TEXT UNIQUE, 
            height INTEGER, 
            weight INTEGER, 
            type TEXT
        )
    """)
    conn.commit()
    conn.close()

# Function to fetch Pok√©mon data from Pok√©API
def fetch_pokemon_from_api(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        pokemon_id = data["id"]
        name = data["name"]
        height = data["height"]
        weight = data["weight"]
        types = ", ".join([t["type"]["name"] for t in data["types"]])

        return (pokemon_id, name, height, weight, types)
    else:
        print("‚ùå Pok√©mon not found!")
        return None

# Function to add Pok√©mon to the database
def add_pokemon(pokemon_data):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    try:
        cursor.execute("INSERT INTO pokemon VALUES (?, ?, ?, ?, ?)", pokemon_data)
        conn.commit()
        print(f"‚úÖ {pokemon_data[1].capitalize()} added to database!")
    except sqlite3.IntegrityError:
        print("‚ö†Ô∏è This Pok√©mon is already in the database.")
    conn.close()

# Function to view all Pok√©mon
def view_all_pokemon():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM pokemon")
    records = cursor.fetchall()
    conn.close()

    if records:
        print("\nüìú Stored Pok√©mon:")
        for row in records:
            print(f"ID: {row[0]}, Name: {row[1]}, Height: {row[2]}, Weight: {row[3]}, Type: {row[4]}")
    else:
        print("‚ö†Ô∏è No Pok√©mon found in the database.")

# Function to search for a Pok√©mon by ID or name
def search_pokemon(identifier):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    if identifier.isdigit():
        cursor.execute("SELECT * FROM pokemon WHERE id = ?", (int(identifier),))
    else:
        cursor.execute("SELECT * FROM pokemon WHERE name LIKE ?", (identifier.lower(),))

    record = cursor.fetchone()
    conn.close()

    if record:
        print(f"\nüîç Found Pok√©mon: ID: {record[0]}, Name: {record[1]}, Height: {record[2]}, Weight: {record[3]}, Type: {record[4]}")
    else:
        print("‚ùå Pok√©mon not found.")

# Function to update Pok√©mon details
def update_pokemon(pokemon_id, new_height, new_weight, new_type):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("""
        UPDATE pokemon 
        SET height = ?, weight = ?, type = ? 
        WHERE id = ?
    """, (new_height, new_weight, new_type, pokemon_id))

    if cursor.rowcount > 0:
        print(f"‚úÖ Pok√©mon with ID {pokemon_id} updated successfully!")
    else:
        print("‚ùå No Pok√©mon found with that ID.")

    conn.commit()
    conn.close()

# Function to delete a Pok√©mon by ID
def delete_pokemon(pokemon_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute("DELETE FROM pokemon WHERE id = ?", (pokemon_id,))

    if cursor.rowcount > 0:
        print(f"üóëÔ∏è Pok√©mon with ID {pokemon_id} deleted successfully!")
    else:
        print("‚ùå No Pok√©mon found with that ID.")

    conn.commit()
    conn.close()

# Main CLI Menu
def main_menu():
    initialise_database()

    while True:
        print("\nüìå Pok√©mon Database CLI")
        print("1Ô∏è‚É£ View all Pok√©mon")
        print("2Ô∏è‚É£ Search Pok√©mon by Name or ID")
        print("3Ô∏è‚É£ Add Pok√©mon from Pok√©API")
        print("4Ô∏è‚É£ Manually Add Pok√©mon")
        print("5Ô∏è‚É£ Update Pok√©mon")
        print("6Ô∏è‚É£ Delete Pok√©mon")
        print("7Ô∏è‚É£ Exit")

        choice = input("Select an option (1-7): ")

        if choice == "1":
            view_all_pokemon()
        elif choice == "2":
            identifier = input("Enter Pok√©mon Name or ID: ")
            search_pokemon(identifier)
        elif choice == "3":
            pokemon_name = input("Enter Pok√©mon name: ")
            data = fetch_pokemon_from_api(pokemon_name)
            if data:
                add_pokemon(data)
        elif choice == "4":
            pokemon_id = int(input("Enter Pok√©mon ID: "))
            name = input("Enter Pok√©mon name: ").lower()
            height = int(input("Enter Pok√©mon height: "))
            weight = int(input("Enter Pok√©mon weight: "))
            type_ = input("Enter Pok√©mon type(s) (comma-separated): ")
            add_pokemon((pokemon_id, name, height, weight, type_))
        elif choice == "5":
            pokemon_id = input("Enter Pok√©mon ID to update: ")
            new_height = input("Enter new height: ")
            new_weight = input("Enter new weight: ")
            new_type = input("Enter new type(s) (comma-separated): ")
            update_pokemon(int(pokemon_id), int(new_height), int(new_weight), new_type)
        elif choice == "6":
            pokemon_id = input("Enter Pok√©mon ID to delete: ")
            confirm = input(f"Are you sure you want to delete Pok√©mon ID {pokemon_id}? (yes/no): ")
            if confirm.lower() == "yes":
                delete_pokemon(int(pokemon_id))
        elif choice == "7":
            print("üëã Exiting program. Goodbye!")
            break
        else:
            print("‚ö†Ô∏è Invalid option. Please choose between 1-7.")

if __name__ == "__main__":
    main_menu()
